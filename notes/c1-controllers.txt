$ npm i -g @nestjs/cli
$ nest new project-name
暗示
要创建具有更严格功能集的新 TypeScript 项目，请将标志传递--strict给nest new命令。

使用Git安装 TypeScript 入门项目：
$ git clone https://github.com/nestjs/typescript-starter.git project
$ cd project
$ npm install
$ npm run start
$ npm run start:dev

为了创建一个基本的控制器，我们使用类和装饰器。装饰器将类与所需的元数据相关联，并使 Nest 能够创建路由映射（将请求绑定到相应的控制器）。
暗示
为了快速创建带有内置验证的CRUD 控制器，您可以使用 CLI 的CRUD 生成器：nest g resource [name]。
要使用 CLI 创建控制器，只需执行$ nest g controller [name]命令即可。

使用@Controller()装饰器，它是定义基本控制器所必需的。我们将指定一个可选的路由路径前缀cats。在装饰器中使用路径前缀@Controller()可以让我们轻松地对一组相关的路由进行分组，并最大限度地减少重复代码。
cats结合装饰器的路径前缀@Get('breed')将为像 . 这样的请求生成路由映射GET /cats/breed

在完全定义了上述控制器的情况下，Nest 仍然不知道它的CatsController存在，因此不会创建此类的实例。
控制器总是属于一个模块，这就是我们controllers在@Module()装饰器中包含数组的原因。由于我们还没有定义除 root 之外的任何其他模块AppModule，我们将使用它来引入CatsController
意思是也可以在别的模块导入Controller，然后再集中这些模块
要做如此修改，才能让该controller被访问到
@Module({
  imports: [],
  controllers: [AppController, CatsController],
  providers: [AppService],
})
export class AppModule {}

标准（推荐）	使用这个内置方法，当请求处理程序返回一个 JavaScript 对象或数组时，它会自动序列化为 JSON。然而，当它返回一个 JavaScript 原始类型（例如，string, number, boolean）时，Nest 将只发送值而不尝试序列化它。这使得响应处理变得简单：只需返回值，Nest 会处理剩下的事情。

此外，默认情况下响应的状态代码始终为 200，除了使用 201 的 POST 请求。我们可以通过@HttpCode(...)在处理程序级别添加装饰器来轻松更改此行为

库特定	我们可以使用库特定的（例如，Express）响应对象，它可以使用@Res()方法处理程序签名中的装饰器注入（例如，findAll(@Res() response)）。通过这种方法，您可以使用该对象公开的本机响应处理方法。例如，使用 Express，您可以使用类似response.status(200).send().

@Req()我们可以通过将装饰器添加到处理程序的签名来指示 Nest 注入它来访问请求对象。

为了利用express类型（如request: Request上面的参数示例），安装@types/express

请求对象表示 HTTP 请求，并具有请求查询字符串、参数、HTTP 标头和正文的属性（在此处阅读更多信息）。在大多数情况下，没有必要手动获取这些属性。我们可以使用开箱即用的专用装饰器，例如@Body()or 。@Query()

 Nest.js（一个强大的 Node.js 框架）提供的 @Res() 和 @Response() 装饰器以及它们的使用场景和注意事项。
为了兼容不同的底层 HTTP 平台（例如 Express 和 Fastify），Nest 提供了 @Res() 和 @Response() 装饰器。@Res() 只是 @Response() 的别名。这两个装饰器都直接暴露了底层原生平台的响应对象接口。
当使用这些装饰器时，你应该同时导入底层库的类型定义（例如 @types/express），以便充分利用这些功能。
注意，当你在方法处理器中注入 @Res() 或 @Response() 时，你把 Nest 切换到了特定库模式，此时，你需要负责管理响应。这意味着你必须通过调用响应对象上的某个方法（例如 res.json(...) 或 res.send(...)）发出某种响应，否则 HTTP 服务器会挂起。

Nest 为所有标准 HTTP 方法提供装饰器：@Get()、@Post()、@Put()、@Delete()、@Patch()、@Options()和@Head()。此外，@All()定义一个处理所有这些的端点。

路由'ab*cd'路径将匹配abcd, ab_cd, abecd, 等等。字符?, +, *, 和()可以在路由路径中使用，并且是它们对应的正则表达式的子集。连字符 ( -) 和点 ( .) 由基于字符串的路径逐字解释

状态代码始终为200，除了 POST 请求为201之外。我们可以通过@HttpCode(...)
@Post()
@HttpCode(204)
create() {

您的状态代码不是静态的，而是取决于各种因素。在这种情况下，您可以使用特定于库的响应（使用注入@Res()）对象（或者，如果出现错误，则抛出异常）

如果你想使用库特定的响应对象（即 res）来设置自定义的响应头，你可以在你的控制器方法中注入 @Res()，然后调用 res.header() 方法。下面是一个例子：

import { Post, Res } from '@nestjs/common';
import { Response } from 'express';

@Post()
create(@Res() res: Response) {
  res.header('Cache-Control', 'none');
  res.send('This action adds a new cat');
}
在这个例子中，我们首先导入了 Nest.js 的 @Post 和 @Res 装饰器，以及 Express.js 的 Response 类型。然后我们在 create 方法中注入了 @Res()，这样我们就可以使用 res.header() 方法设置自定义的响应头了。最后，我们调用 res.send() 发送响应，这是必须的，否则 HTTP 服务器会挂起。
注意：这个例子使用了 Express.js 的 Response 类型，如果你的应用使用了 Fastify 或其他 HTTP 库，你需要导入相应的类型。

要将响应重定向到特定 URL，您可以使用@Redirect()装饰器或库特定的响应对象（并res.redirect()直接调用）。
@Redirect()有两个参数，url和statusCode，两者都是可选的。statusCode如果省略，则默认值为302( Found)。
@Get()
@Redirect('https://nestjs.com', 301)

return {
        url: 'https://docs.nestjs.com/v5/',
        status: 302,
      };

当您需要接受动态数据作为请求的一部分时（例如，GET /cats/1获取带有 id 的猫1），具有静态路径的路由将不起作用。为了定义带有参数的路由，我们可以在路由的路径中添加路由参数令牌，以捕获请求 URL 中该位置的动态值。

@Param()用于装饰方法参数（params在上面的示例中），并使路由参数可用作方法主体内该装饰方法参数的属性，我们可以id通过引用来访问参数params.id。也可以传入一个特定的参数token给装饰器，然后在方法体中直接通过名称引用路由参数。

这段文字讲述的是 Nest.js 中的子域名路由功能。
@Controller 装饰器可以接收一个 host 选项，这个选项用于限制 HTTP 请求的主机名必须匹配特定的值。例如，@Controller({ host: 'admin.example.com' }) 会要求请求的主机名必须是 'admin.example.com'。只有满足这个条件的请求才会被这个控制器处理。
如果你想要使用子域名路由，你应该使用 Express 适配器而不是 Fastify。因为 Fastify 不支持嵌套路由。
host 选项可以使用令牌来捕获主机名中的动态值。例如，@Controller({ host: ':account.example.com' }) 中的 ':account' 就是一个令牌。你可以在方法中使用 @HostParam() 装饰器来获取这个值。例如，@Get() 方法中的 @HostParam('account') account: string 就是获取 'account' 令牌的值。
总的来说，这个功能主要是用于处理针对特定主机或子域名的 HTTP 请求。使用这个功能，你可以为不同的子域名提供不同的处理逻辑。

@Controller({ host: 'admin.example.com' })
export class AdminController {
  @Get()
  index(): string {
    return 'Admin page';
  }
}

@Controller({ host: ':account.example.com' })
export class AccountController {
  @Get()
  getInfo(@HostParam('account') account: string) {
    return account;
  }
}

对于来自不同编程语言背景的开发者来说，Nest.js 中几乎所有的东西都是在进来的请求之间共享的，这可能是出乎他们意料的。例如，数据库连接池，具有全局状态的单例服务等。这是因为 Node.js 不遵循每个请求由单独线程处理的请求/响应多线程无状态模型。因此，在我们的应用中使用单例实例是完全安全的。
然而，在某些边缘情况下，可能需要控制器的生命周期基于请求，例如在 GraphQL 应用中的每请求缓存、请求跟踪或多租户场景。你可以在此处学习如何控制作用域。

Node.js（包括基于其构建的 Nest.js）采用了单线程事件驱动模型，这与 Java Spring 的多线程模型确实有显著不同。
在 Node.js 中，所有的操作都运行在一个单独的线程中，但它可以高效地处理大量的并发请求，原因在于它的异步非阻塞 I/O 和事件驱动的架构。
这是怎么工作的呢？当 Node.js 应用接收到一个请求，比如数据库查询或文件读取，它不会等待操作完成，而是立即开始处理下一个请求。当操作完成时，Node.js 将通过回调函数来处理结果。这就是 Node.js 可以在单线程中处理高并发请求的原因。
然而，这并不意味着 Node.js 不能利用多核处理器。你可以通过 Node.js 的 cluster 模块来启动多个进程，每个进程运行在自己的线程中，并共享同一端口。这种方式可以让你充分利用多核处理器，提高应用的性能和可用性。在 Nest.js 中，也有类似的模块来帮助你管理多个进程。
总的来说，Node.js 和 Nest.js 采用的是单线程事件驱动模型，这使得它们可以在单个线程中高效地处理大量并发请求。不过，通过使用额外的模块，你也可以在 Node.js 和 Nest.js 中使用多进程来充分利用多核处理器。

在 Nest.js 中，提到的 "Scope" 是指对象（如服务或控制器）的生命周期和可见性。Nest.js 中的服务通常有三种作用域：Singleton、Request、Transient。
Singleton Scope（单例作用域）：默认情况下，Nest.js 中的服务都是单例的，也就是说，在整个应用中，只会存在这个服务的一个实例。无论服务被注入到多少个控制器或其他服务中，都是同一个实例。这就是为什么文本中说 "几乎所有的东西都是在进来的请求之间共享的"。这在大多数情况下是完全没问题的，也是最常见的使用方式。
Request Scope（请求作用域）：在某些情况下，你可能需要服务在每个请求中都是新的实例，也就是说，每个请求都有自己的服务实例，与其他请求互不干扰。这就是所谓的 "请求作用域"。请求作用域的服务在请求开始时创建，在请求结束时销毁。例如，在 GraphQL 应用中的每请求缓存、请求跟踪或多租户场景，可能需要使用请求作用域。
Transient Scope（瞬态作用域）：瞬态作用域的服务每次注入时都会创建新的实例。也就是说，如果一个服务在同一个请求处理过程中被注入到两个地方，那么这两个地方将得到两个不同的服务实例。
Nest.js 提供了这三种作用域，以便你可以根据自己的需求选择最合适的服务生命周期。在大多数情况下，单例作用域已经足够了，但如果你需要更细粒度的控制，可以选择请求作用域或瞬态作用域。


"作用域" 在这里指的是在依赖注入过程中，服务（Service）组件实例的创建和存在方式。在 Nest.js 中，服务的作用域决定了当服务被注入到控制器或其他服务时，到底创建新的实例还是使用已有的实例。
默认情况下，所有的服务在 Nest.js 中都是单例的。这意味着，对于整个应用程序来说，服务组件只有一个实例，无论它被注入到多少个地方。所有使用这个服务的控制器或者其他服务，都会共享这个唯一的实例。
但是，如果你想要改变这个默认行为，可以设置服务为请求作用域或者瞬态作用域。请求作用域会让每个请求都有一个新的服务实例，而瞬态作用域则会让每次注入操作都创建一个新的服务实例。
这种方式给你提供了更多的灵活性，使你可以根据不同的情况选择最合适的服务生命周期。


每个异步函数都必须返回一个Promise. 这意味着您可以返回一个 Nest 能够自行解析的延迟值。让我们看一个例子：
  @Get('async')
  async findAllByAsync(): Promise<any[]> {
    return ['a', 'b'];
  }
能够自行解析就是说nest收到这个promise后，主流程就不用管了，promise resolved时，nest自动会回来处理它。
上面的代码是完全有效的。此外，Nest 路由处理程序更强大，因为它能够返回 RxJS可观察流。Nest 将自动订阅下面的源并获取最后发出的值（一旦流完成）。
  @Get('rxjs')
  findByRxjs(): Observable<any[]> {
    return of(['c', 'd']);
  }


关于post的body
如果您使用 TypeScript），我们需要确定DTO（数据传输对象）架构。DTO 是定义数据如何通过网络发送的对象。我们可以使用TypeScript接口或简单的类来确定 DTO 模式。有趣的是，我们建议在这里使用类。为什么？类是 JavaScript ES6 标准的一部分，因此它们在编译后的 JavaScript 中作为真实实体保存。另一方面，由于 TypeScript 接口在转换过程中被删除，Nest 无法在运行时引用它们。这很重要，因为管道等功能在运行时可以访问变量的元类型时会启用其他可能性。

我们ValidationPipe可以过滤掉方法处理程序不应接收的属性。在这种情况下，我们可以将可接受的属性列入白名单，并且白名单中未包含的任何属性都会自动从生成的对象中删除。在CreateCatDto示例中，我们的白名单是name、age和breed属性。

这里有一个关于处理错误（即处理异常）的单独章节。

Nest CLI 提供了一个生成器（原理图），可以自动生成所有样板代码，帮助我们避免所有这些操作，并使开发人员体验更加简单。

到目前为止，我们已经讨论了处理响应的 Nest 标准方法。处理响应的第二种方法是使用库特定的响应对象。为了注入特定的响应对象，我们需要使用@Res()装饰器。

  @Post()
  create(@Res() res: Response) {
    res.status(HttpStatus.CREATED).send();
  }
@Get()
findAll(@Res({ passthrough: true }) res: Response) {
  res.status(HttpStatus.OK);
  return [];
}
在这两个方法中，都使用了@Res()装饰器来注入特定的响应对象。这个响应对象来自express库，是一个专门用来处理HTTP响应的对象。使用这个对象，你可以手动设置响应的状态码，发送响应，或者将数据转换为JSON格式。
然而，这种方法也有它的缺点。你的代码会变得依赖特定的平台，因为不同的库可能在响应对象上有不同的API。你的代码也会变得更难以测试，因为你需要模拟响应对象等等。
此外，你会失去和Nest的一些功能的兼容性，例如拦截器（Interceptors）和@HttpCode()/ @Header()装饰器。为了解决这个问题，你可以将passthrough选项设置为true。这样，你可以与原生的响应对象进行交互（例如，根据特定的条件设置cookies或headers），但是剩下的工作就交给框架来处理。






